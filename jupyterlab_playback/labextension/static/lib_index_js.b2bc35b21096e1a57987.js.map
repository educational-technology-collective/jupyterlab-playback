{"version":3,"file":"lib_index_js.b2bc35b21096e1a57987.js","mappings":"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","sources":["webpack://jupyterlab-playback/./src/cm.ts","webpack://jupyterlab-playback/./src/handler.ts","webpack://jupyterlab-playback/./src/index.ts","webpack://jupyterlab-playback/./src/playback.ts"],"sourcesContent":["import { NotebookPanel } from '@jupyterlab/notebook';\nimport { basicSetup } from 'codemirror';\nimport {\n  EditorView,\n  Decoration,\n  DecorationSet,\n  ViewPlugin,\n  ViewUpdate,\n  lineNumbers\n} from '@codemirror/view';\nimport { EditorState, RangeSetBuilder } from '@codemirror/state';\n\nconst map2doc = (map: Array<any>) =>\n  map ? map.map(lineMap => lineMap['command'].join('+')).join('\\n') : '';\nconst doc2map = (doc: string) =>\n  doc.split('\\n').map(line => ({ command: line.split('+') }));\n\nconst source2template = (source: string) => {\n  const sourceLines = source.split('\\n');\n  const sourceLength = sourceLines.length || 0;\n  const map = [];\n  for (let i = 0; i < sourceLength; i++) {\n    const sourceLine = sourceLines[i];\n    if (/^\\s*#/.test(sourceLine)) {\n      // lines starting with '#' or ' #'\n      map.push({ command: ['TYPE', 'AUDIO'] });\n    } else if (/^\\s*$/.test(sourceLine)) {\n      // empty or contain only spaces\n      map.push({ command: ['PAUSE500'] });\n    } else {\n      map.push({ command: ['TYPE'] });\n    }\n  }\n  const doc = map2doc(map);\n  return { map, doc };\n};\n\n// Fix errors caused by delayed loading of cells\nconst getCellInputWrapper = (notebookPanel: NotebookPanel, index: number) =>\n  new Promise<HTMLElement>(resolve => {\n    const getElement = () => {\n      const node = notebookPanel.content.widgets[index].node;\n      const cellInputWrapper = node.getElementsByClassName(\n        'lm-Widget lm-Panel jp-Cell-inputWrapper'\n      )[0] as HTMLElement;\n      if (cellInputWrapper) {\n        resolve(cellInputWrapper);\n      } else {\n        requestAnimationFrame(getElement);\n      }\n    };\n    getElement();\n  });\n\nexport const createMetadataEditor = async (\n  notebookPanel: NotebookPanel,\n  metadataEditorWidth: number\n) => {\n  const length = notebookPanel.model?.cells.length || 0;\n  for (let j = 0; j < length; j++) {\n    const cell = notebookPanel.model?.cells.get(j);\n    if (cell && cell.type == 'code') {\n      await notebookPanel.content.widgets[j].ready;\n      const cellInputWrapper = await getCellInputWrapper(notebookPanel, j);\n      const cellInputArea = cellInputWrapper.getElementsByClassName(\n        'jp-Cell-inputArea'\n      )[0] as HTMLElement;\n      cellInputArea.classList.add('code-editor');\n      cellInputArea.style.width = (100 - metadataEditorWidth).toString() + '%';\n      const metadataEditor = document.createElement('div');\n      metadataEditor.classList.add('metadata-editor');\n      metadataEditor.style.width = metadataEditorWidth.toString() + '%';\n\n      const initialState = cell.getMetadata('map')\n        ? map2doc(cell.getMetadata('map'))\n        : (() => {\n            const { map, doc } = source2template(cell.sharedModel.source);\n            cell.setMetadata('map', map);\n            return doc;\n          })();\n\n      const state = EditorState.create({\n        doc: initialState,\n        extensions: [\n          basicSetup,\n          lineNumbers(),\n          EditorView.updateListener.of(update => {\n            if (update.docChanged) {\n              cell.setMetadata('map', doc2map(update.state.doc.toString()));\n            }\n          })\n        ]\n      });\n\n      new EditorView({\n        state,\n        parent: metadataEditor\n      });\n\n      cellInputWrapper.appendChild(metadataEditor);\n    }\n  }\n};\n\n// Function to create a highlight plugin for a specific line\nexport const highlightLinePlugin = (lineNumber: number) => {\n  return ViewPlugin.fromClass(\n    class {\n      decorations: DecorationSet;\n\n      constructor(view: EditorView) {\n        this.decorations = this.createLineHighlight(view, lineNumber);\n      }\n\n      createLineHighlight(view: EditorView, lineNumber: number): DecorationSet {\n        const builder = new RangeSetBuilder<Decoration>();\n        const line = view.state.doc.line(lineNumber);\n\n        const lineDecoration = Decoration.line({ class: 'highlight-line' });\n        builder.add(line.from, line.from, lineDecoration);\n        return builder.finish();\n      }\n\n      update(update: ViewUpdate) {\n        if (update.docChanged) {\n          this.decorations = this.createLineHighlight(update.view, lineNumber);\n        }\n      }\n    },\n    {\n      decorations: v => v.decorations\n    }\n  );\n};\n","import { URLExt } from '@jupyterlab/coreutils';\n\nimport { ServerConnection } from '@jupyterlab/services';\n\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI<T>(\n  endPoint = '',\n  init: RequestInit = {}\n): Promise<T> {\n  // Make request to Jupyter API\n  const settings = ServerConnection.makeSettings();\n  const requestUrl = URLExt.join(\n    settings.baseUrl,\n    'jupyterlab-playback', // API Namespace\n    endPoint\n  );\n\n  let response: Response;\n  try {\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    throw new ServerConnection.NetworkError(error as any);\n  }\n\n  let data: any = await response.text();\n\n  if (data.length > 0) {\n    try {\n      data = JSON.parse(data);\n    } catch (error) {\n      console.log('Not a JSON response body.', response);\n    }\n  }\n\n  if (!response.ok) {\n    throw new ServerConnection.ResponseError(response, data.message || data);\n  }\n\n  return data;\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { INotebookTracker, NotebookPanel } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { Widget } from '@lumino/widgets';\nimport { requestAPI } from './handler';\nimport { createMetadataEditor } from './cm';\nimport { playback } from './playback';\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-playback:plugin',\n  description: 'A JupyterLab extension.',\n  autoStart: true,\n  requires: [INotebookTracker, ISettingRegistry],\n  activate: async (\n    app: JupyterFrontEnd,\n    notebookTracker: INotebookTracker,\n    settingRegistry: ISettingRegistry\n  ) => {\n    console.log('JupyterLab extension jupyterlab-playback is activated!');\n    const settings = await settingRegistry.load(plugin.id);\n    const metadataEditorWidth = settings.get('metadataEditorWidth')\n      .composite as number;\n\n    notebookTracker.widgetAdded.connect(\n      async (_, notebookPanel: NotebookPanel) => {\n        await notebookPanel.revealed;\n        await notebookPanel.sessionContext.ready;\n\n        const button = document.createElement('button');\n        button.id = 'extension-button';\n        const node = document.createElement('div');\n        node.appendChild(button);\n        notebookPanel.toolbar.insertAfter(\n          'spacer',\n          'button',\n          new Widget({ node: node })\n        );\n\n        const mode = notebookPanel.model?.getMetadata('mode');\n        if (!mode) notebookPanel.model?.setMetadata('mode', 'editor');\n        if (!mode || mode === 'editor') {\n          createMetadataEditor(notebookPanel, metadataEditorWidth);\n          button.innerHTML = 'Generate an interactive notebook';\n          button.onclick = async () => {\n            button.innerHTML = 'Generating notebook...';\n            const response: any = await requestAPI('load', {\n              method: 'POST',\n              body: JSON.stringify({\n                data: notebookPanel?.model?.toJSON(),\n                relativePath: notebookTracker.currentWidget?.context.path\n              })\n            });\n            console.log(response);\n            button.innerHTML = 'Regenerate interactive notebook';\n          };\n        } else if (mode === 'player') {\n          button.innerHTML = ' ▶ ';\n          notebookPanel.model?.setMetadata('isPlaying', false);\n          button.onclick = () => {\n            const isPlaying =\n              notebookPanel.model?.getMetadata('isPlaying') || false;\n            notebookPanel.model?.setMetadata('isPlaying', !isPlaying);\n            if (!isPlaying) playback(notebookPanel);\n          };\n        }\n      }\n    );\n  }\n};\n\nexport default plugin;\n","import { NotebookPanel, NotebookActions } from '@jupyterlab/notebook';\nimport { ICellModel } from '@jupyterlab/cells';\nimport { StateEffect } from '@codemirror/state';\nimport { CodeMirrorEditor } from '@jupyterlab/codemirror';\nimport { requestAPI } from './handler';\nimport { highlightLinePlugin } from './cm';\n\nconst stop = async (\n  cellMap: any,\n  i: number,\n  j: number,\n  notebookPanel: NotebookPanel\n) => {\n  const button = document.getElementById('extension-button');\n  let jj = j;\n  if ('audio_index' in cellMap[j]) {\n    while (\n      jj > 0 &&\n      'audio_index' in cellMap[jj - 1] &&\n      cellMap[jj - 1]['audio_index'] === cellMap[jj]['audio_index']\n    ) {\n      jj -= 1;\n    }\n  }\n  notebookPanel?.model?.setMetadata('cellIndex', i);\n  notebookPanel?.model?.setMetadata('lineIndex', jj);\n  if (button) {\n    button.innerHTML = ' ▶ ';\n  }\n  const response: any = await requestAPI('stop', {\n    method: 'POST',\n    body: ''\n  });\n};\nexport const playback = async (notebookPanel: NotebookPanel) => {\n  const cells = notebookPanel.model?.cells;\n  const cellIndex = notebookPanel.model?.getMetadata('cellIndex') || 0;\n  const lineIndex = notebookPanel.model?.getMetadata('lineIndex') || 0;\n  const button = document.getElementById('extension-button');\n\n  if (cells) {\n    if (button) {\n      button.innerHTML = '||';\n    } else {\n      console.warn('null button');\n    }\n    let currentAudio = null;\n    for (let i = cellIndex; i < cells.length; i++) {\n      let source = '';\n      const cell: ICellModel = cells.get(i);\n      if (cell.type === 'code') {\n        const cellMap = cell.getMetadata('full_map');\n\n        for (let j = 0; j < cellMap?.length; j++) {\n          const commands = cellMap[j]['command'];\n          const text = cellMap[j]['text'];\n          if (i === cellIndex && j < lineIndex) {\n            source += text;\n            if (j != cellMap?.length - 1) source += '\\n';\n            cell.sharedModel.setSource(source);\n          } else {\n            const isPlaying = notebookPanel.model.getMetadata('isPlaying');\n            if (!isPlaying) {\n              await stop(cellMap, i, j, notebookPanel);\n              return;\n            }\n            if (commands.some((command: string) => command.includes('AUDIO'))) {\n              const audioSrc = cellMap[j]['audio_src'];\n              if (audioSrc !== currentAudio) {\n                currentAudio = audioSrc;\n                await requestAPI('audio', {\n                  method: 'POST',\n                  body: JSON.stringify({\n                    audio_src: currentAudio\n                  })\n                });\n              }\n            }\n            for (const command of commands) {\n              if (command.includes('TYPE')) {\n                const chunk = [...text];\n                if (j != cellMap?.length - 1) chunk.push('\\n');\n                for (let char of chunk) {\n                  source += char;\n                  cell.sharedModel.setSource(source);\n                  await new Promise(resolve => {\n                    setTimeout(resolve, 50);\n                  });\n\n                  const isPlaying =\n                    notebookPanel.model.getMetadata('isPlaying');\n                  if (!isPlaying) {\n                    await stop(cellMap, i, j, notebookPanel);\n                    return;\n                  }\n                }\n              }\n              if (command.includes('PAUSE')) {\n                const time = command.replace(/\\D/g, '');\n                source += '\\n';\n                cell.sharedModel.setSource(source);\n                await new Promise(resolve => {\n                  setTimeout(resolve, time);\n                });\n              }\n              if (command.includes('SELECT')) {\n                const lineToHighlight = command.replace(/\\D/g, '');\n                const cm = notebookPanel.content.widgets[i]\n                  ?.editor as CodeMirrorEditor;\n                const highlightPlugin = highlightLinePlugin(lineToHighlight);\n\n                // Apply the highlight plugin to the existing instance\n                cm.editor.dispatch({\n                  effects: StateEffect.appendConfig.of([highlightPlugin])\n                });\n              }\n              if (command.includes('EXECUTE')) {\n                NotebookActions.runCells(\n                  notebookPanel.content,\n                  [notebookPanel.content.widgets[i]],\n                  notebookPanel.context.sessionContext\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  if (button) button.innerHTML = ' ▶ '; // end of notebook or no cell available\n  notebookPanel.model?.setMetadata('cellIndex', '');\n  notebookPanel.model?.setMetadata('lineIndex', '');\n  notebookPanel.model?.setMetadata('isPlaying', false);\n};\n"],"names":[],"sourceRoot":""}